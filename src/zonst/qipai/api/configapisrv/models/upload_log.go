package models

import (
	"encoding/json"
	"fmt"
	"github.com/fwhezfwhez/cmap"
	"github.com/fwhezfwhez/errorx"
	"github.com/garyburd/redigo/redis"
	"github.com/jinzhu/gorm"
	"io/ioutil"
	"net/http"
	"time"
	"zonst/qipai/api/configapisrv/config"
	"zonst/qipai/api/configapisrv/dependency/db"
)

// Auto-Generate Header
/*
    Code is auto-generated by github.com/fwhezfwhez/model_convert.Package below might be imported:
      - github.com/fwhezfwhez/errorx
	  - github.com/garyburd/redigo/redis
	  - github.com/fwhezfwhez/cmap
      - github.com/jinzhu/gorm
      - configapisrv/dependency/db
    You can get them by:
      - go get github.com/fwhezfwhez/errorx
      - go get github.com/garyburd/redigo/redis
      - go get github.com/jinzhu/gorm

    To fulfill redis part, don't forget to set TODOs.They are:
      - RedisKey() string
      - RedisSecondDuration() int
*/
type UploadLog struct {
	Id         int       `gorm:"column:id;default:" json:"id" form:"id"`
	Label      string    `gorm:"column:label;default:" json:"label" form:"label"`
	RequestId  string    `gorm:"column:request_id;default:" json:"request_id" form:"request_id"`
	GameId     int       `gorm:"column:game_id;default:" json:"game_id" form:"game_id"`
	GameName   string    `gorm:"column:game_name;default:" json:"game_name" form:"game_name"`
	Remark     string    `gorm:"column:remark;default:" json:"remark" form:"remark"`
	Md5        string    `gorm:"column:md5;default:" json:"md5" form:"md5"`
	Vstate     int       `gorm:"column:vstate;default:" json:"vstate" form:"vstate"`
	FailReason string    `gorm:"column:fail_reason;default:" json:"fail_reason" form:"fail_reason"`
	CreatedAt  time.Time `gorm:"column:created_at;default:" json:"created_at" form:"created_at"`
	FinishAt   time.Time `gorm:"column:finish_at;default:" json:"finish_at" form:"finish_at"`
}

func (o UploadLog) TableName() string {
	return "upload_log"
}

func (o UploadLog) DB() *gorm.DB {
	return db.QipaiDB
}

var UploadLogRedisKeyFormat = "configapisrv:upload_log:%s:%s"

func (o UploadLog) RedisKey() string {
	// TODO set its redis key and required args
	return fmt.Sprintf(UploadLogRedisKeyFormat, config.Node.Mode, o.RequestId)
}

var ArrayUploadLogRedisKeyFormat = ""

func (o UploadLog) ArrayRedisKey() string {
	// TODO set its array key and required args
	return fmt.Sprintf(ArrayUploadLogRedisKeyFormat)
}

// 2nd-cache switch.More detail refer to '2nd-cache Header'
const (
	// Whether use cache
	UploadLogCacheSwitch = false
	// Whether use  array cache
	ArrayUploadLogCacheSwitch = false
)

func (o UploadLog) RedisSecondDuration() int {
	// TODO set its redis duration, default 1-7 day,  return -1 means no time limit
	return int(time.Now().Unix()%7+5) * 60
}

// TODO,set using db or not. If set false, o.MustGet() will never get its data from db.
// do not use this
func (o UploadLog) UseDB() bool {
	return false
}

func (o *UploadLog) GetFromRedis(conn redis.Conn) error {
	if o.RedisKey() == "" {
		return errorx.NewFromString("object UploadLog has not set redis key yet")
	}
	buf, e := redis.Bytes(conn.Do("GET", o.RedisKey()))

	if e == nil && string(buf) == "DISABLE" {
		return fmt.Errorf("not found record in db nor redis")
	}

	if e == redis.ErrNil {
		return e
	}

	if e != nil && e != redis.ErrNil {
		return errorx.Wrap(e)
	}

	e = json.Unmarshal(buf, &o)

	if e != nil {
		return errorx.Wrap(e)
	}
	return nil
}

func (o *UploadLog) ArrayGetFromRedis(conn redis.Conn) ([]UploadLog, error) {
	if o.ArrayRedisKey() == "" {
		return nil, errorx.NewFromString("object UploadLog has not set redis key yet")
	}

	var list = make([]UploadLog, 0, 10)
	buf, e := redis.Bytes(conn.Do("GET", o.ArrayRedisKey()))

	// avoid passing through and hit database
	// When o.ArrayMustGet() not found both in redis and db, will set its key DISABLE
	// and return 'fmt.Errorf("not found record in db nor redis")'
	if e == nil && string(buf) == "DISABLE" {
		return nil, fmt.Errorf("not found record in db nor redis")
	}

	// Not found in redis
	if e == redis.ErrNil {
		return nil, e
	}

	// Server error, should be logged by caller
	if e != nil && e != redis.ErrNil {
		return nil, errorx.Wrap(e)
	}

	e = json.Unmarshal(buf, &list)

	if e != nil {
		return nil, errorx.Wrap(e)
	}
	return list, nil
}

// engine should prepare its condition.
// if record not found,it will return 'var notFound = fmt.Errorf("not found record in db nor redis")'.
// If you want to ignore not found error, do it like:
// if e:= o.MustGet(conn, engine.Model(Model{}).Where("condition =?", arg)).Error;e!=nil {
//     if e.Error() == "not found record in db nor redis"{
//         log.Println(e)
//         return
//     }
// }
func (o *UploadLog) MustGet(conn redis.Conn, engine *gorm.DB) error {
	var shouldSyncToCache bool

	if UploadLogCacheSwitch {
		if e := o.getFromCache(); e == nil {
			return nil
		}
		defer func() {
			if shouldSyncToCache {
				fmt.Println("exec sync to cache")
				o.syncToCache()
			}
		}()
	}

	e := o.GetFromRedis(conn)
	// When redis key stores its value 'DISABLE', will returns notFoundError and no need to query from db any more
	if e != nil && e.Error() == "not found record in db nor redis" {
		return e
	}

	if e == nil {
		shouldSyncToCache = true
		return nil
	}
	if e != nil {
		var count int
		if e2 := engine.Count(&count).Error; e2 != nil {
			return errorx.GroupErrors(errorx.Wrap(e), errorx.Wrap(e2))
		}
		if count == 0 {
			var notFound = fmt.Errorf("not found record in db nor redis")
			if o.RedisSecondDuration() == -1 {
				conn.Do("SET", o.RedisKey(), "DISABLE", "NX")
			} else {
				conn.Do("SET", o.RedisKey(), "DISABLE", "EX", o.RedisSecondDuration(), "NX")
			}
			return notFound
		}

		if e3 := engine.First(&o).Error; e3 != nil {
			return errorx.GroupErrors(errorx.Wrap(e), errorx.Wrap(e3))
		}
		shouldSyncToCache = true

		if e == redis.ErrNil {
			o.SyncToRedis(conn)
			return nil
		}
		return errorx.Wrap(e)
	}
	return nil
}

func (o *UploadLog) ArrayMustGet(conn redis.Conn, engine *gorm.DB) ([]UploadLog, error) {
	var shouldSyncToCache bool
	var arr []UploadLog

	if ArrayUploadLogCacheSwitch {
		if arr, e := o.ArrayGetFromCache(); e == nil {
			return arr, nil
		}
		defer func() {
			if shouldSyncToCache {
				fmt.Println("exec sync to cache")
				o.ArraySyncToCache(arr)
			}
		}()
	}

	list, e := o.ArrayGetFromRedis(conn)
	// When redis key stores its value 'DISABLE', will returns notFoundError and no need to query from db any more
	// When call ArrayDeleteFromRedis(), will activate its redis and db query
	if e != nil && e.Error() == "not found record in db nor redis" {
		return nil, e
	}
	// get from redis success.
	if e == nil {
		shouldSyncToCache = true
		arr = list
		return list, nil
	}
	// get from redis fail, try db
	if e != nil {
		var count int
		if e2 := engine.Count(&count).Error; e2 != nil {
			return nil, errorx.GroupErrors(errorx.Wrap(e), errorx.Wrap(e2))
		}
		if count == 0 {
			var notFound = fmt.Errorf("not found record in db nor redis")
			if o.RedisSecondDuration() == -1 {
				conn.Do("SET", o.ArrayRedisKey(), "DISABLE", "NX")
			} else {
				conn.Do("SET", o.ArrayRedisKey(), "DISABLE", "EX", o.RedisSecondDuration(), "NX")
			}
			return nil, notFound
		}

		if e3 := engine.Find(&list).Error; e3 != nil {
			return nil, errorx.GroupErrors(errorx.Wrap(e), errorx.Wrap(e3))
		}

		shouldSyncToCache = true
		arr = list
		// try sync to redis
		if e == redis.ErrNil {
			o.ArraySyncToRedis(conn, list)
			return list, nil
		}
		return nil, errorx.Wrap(e)
	}
	return nil, nil
}

func (o UploadLog) SyncToRedis(conn redis.Conn) error {
	if o.RedisKey() == "" {
		return errorx.NewFromString("object UploadLog has not set redis key yet")
	}
	buf, e := json.Marshal(o)
	if e != nil {
		return errorx.Wrap(e)
	}
	if o.RedisSecondDuration() == -1 {
		if _, e := conn.Do("SET", o.RedisKey(), buf); e != nil {
			return errorx.Wrap(e)
		}
	} else {
		if _, e := conn.Do("SETEX", o.RedisKey(), o.RedisSecondDuration(), buf); e != nil {
			return errorx.Wrap(e)
		}
	}
	return nil
}

func (o UploadLog) ArraySyncToRedis(conn redis.Conn, list []UploadLog) error {
	if o.ArrayRedisKey() == "" {
		return errorx.NewFromString("object UploadLog has not set redis key yet")
	}
	buf, e := json.Marshal(list)
	if e != nil {
		return errorx.Wrap(e)
	}
	if o.RedisSecondDuration() == -1 {
		if _, e := conn.Do("SET", o.ArrayRedisKey(), buf); e != nil {
			return errorx.Wrap(e)
		}
	} else {
		if _, e := conn.Do("SETEX", o.ArrayRedisKey(), o.RedisSecondDuration(), buf); e != nil {
			return errorx.Wrap(e)
		}
	}
	return nil
}

func (o UploadLog) DeleteFromRedis(conn redis.Conn) error {
	if o.RedisKey() != "" {
		if _, e := conn.Do("DEL", o.RedisKey()); e != nil {
			return errorx.Wrap(e)
		}
	}

	if o.ArrayRedisKey() != "" {
		if _, e := conn.Do("DEL", o.ArrayRedisKey()); e != nil {
			return errorx.Wrap(e)
		}
	}

	if UploadLogCacheSwitch {
		o.deleteFromCache()
	}
	if ArrayUploadLogCacheSwitch {
		o.ArraydeleteFromCache()
	}
	return nil
}
func (o UploadLog) ArrayDeleteFromRedis(conn redis.Conn) error {
	return o.DeleteFromRedis(conn)
}

// Dump data through api GET remote url generated by 'GenerateListApi()' to local database.
// This method should never used in production. It's best to to run it before app is running.
//
// mode=1, each time will delete old local data and dump from api.
// mode=2, each time will update/keep the existed data. Mode=2 is developing.
func (o UploadLog) DumpToLocal(url string, engine *gorm.DB, mode int) error {
	tableName := o.TableName()

	tran := engine.Begin()
	if e := tran.Exec(fmt.Sprintf("delete from %s", tableName)).Error; e != nil {
		tran.Rollback()
		return errorx.Wrap(e)
	}

	type Result struct {
		Data  []UploadLog `json:"data"`
		Count int         `json:"count"`
	}
	var result Result
	resp, e := http.Get(url)
	if e != nil {
		tran.Rollback()
		return errorx.Wrap(e)
	}
	if resp == nil || resp.Body == nil {
		tran.Rollback()
		return errorx.NewFromString("resp or body nil")
	}
	defer resp.Body.Close()

	buf, e := ioutil.ReadAll(resp.Body)
	if e != nil {
		tran.Rollback()
		return errorx.Wrap(e)
	}

	if resp.StatusCode != 200 {
		var body string
		if len(buf) < 100 {
			body = string(buf)
		} else {
			body = string(buf[:100])
		}
		return errorx.NewFromStringf("status not 200, got %d,body %s", resp.StatusCode, body)
	}

	if e := json.Unmarshal(buf, &result); e != nil {
		tran.Rollback()
		return errorx.Wrap(e)
	}

	for i, _ := range result.Data {
		data := result.Data[i]
		if e := tran.Model(&o).Create(&data).Error; e != nil {
			tran.Rollback()
			return errorx.Wrap(e)
		}
	}
	tran.Commit()
	return nil
}

// 2nd-cache Header
// 2nd-cache share RedisKey() as its key.

// self Header
var (
	UploadLogCache *cmap.MapV2

	UploadLogNotFoundErr  = fmt.Errorf("not found in cache")
	UploadLogSwitchOffErr = fmt.Errorf("2nd-cache switch is off")
)

// cache expires in 15s
func (o *UploadLog) cacheDuration() int {
	return 15
}

func (o *UploadLog) getFromCache() error {
	if UploadLogCacheSwitch == false {
		return UploadLogSwitchOffErr
	}

	tmp, ok := UploadLogCache.Get(o.RedisKey())
	if !ok {
		return UploadLogNotFoundErr
	}
	*o = tmp.(UploadLog)
	fmt.Println("get from cache")
	return nil
}

func (o *UploadLog) deleteFromCache() {
	if UploadLogCacheSwitch == false {
		return
	}

	UploadLogCache.Delete(o.RedisKey())
}

func (o *UploadLog) syncToCache() {
	if UploadLogCacheSwitch == false {
		return
	}
	UploadLogCache.SetEx(o.RedisKey(), *o, o.cacheDuration())
}

// self Tail

// array Header
var (
	ArrayUploadLogCache *cmap.MapV2

	ArrayUploadLogNotFoundErr  = fmt.Errorf("not found in cache")
	ArrayUploadLogSwitchOffErr = fmt.Errorf("2nd-cache switch is off")
)

func init() {
	if UploadLogCacheSwitch {
		UploadLogCache = cmap.NewMapV2(nil, 8, time.Second*60)
	}

	if ArrayUploadLogCacheSwitch {
		ArrayUploadLogCache = cmap.NewMapV2(nil, 8, time.Second*60)
	}
}

func (o *UploadLog) ArrayGetFromCache() ([]UploadLog, error) {
	if ArrayUploadLogCacheSwitch == false {
		return nil, ArrayUploadLogSwitchOffErr
	}

	tmp, ok := ArrayUploadLogCache.Get(o.ArrayRedisKey())
	if !ok {
		return nil, ArrayUploadLogNotFoundErr
	}
	fmt.Println("get from cache")
	return tmp.([]UploadLog), nil
}

func (o *UploadLog) ArraydeleteFromCache() {
	if ArrayUploadLogCacheSwitch == false {
		return
	}

	ArrayUploadLogCache.Delete(o.ArrayRedisKey())
}

func (o *UploadLog) ArraySyncToCache(arr []UploadLog) {
	if ArrayUploadLogCacheSwitch == false {
		return
	}

	ArrayUploadLogCache.SetEx(o.ArrayRedisKey(), arr, o.cacheDuration())
}

// array Tail

// 2nd-cache Tail

// flexible-cache Header
// func (o UploadLog) ${cache_name}Key() string{
// 	// TODO-Set cache redis key
// 	return ""
// }
// func (o UploadLog) ${cache_name}Duration() int{
// 	// TODO-Set cache redis key expire duration. Default 1-7 days
//     return int(time.Now().Unix() % 7 + 5) * 60
// }
// func (o *UploadLog) ${cache_name}MustGet(conn redis.Conn, source func(${cache_name} *${cache_type})error) (${cache_type}, error) {

// 	rs, e:= redis.${Cache_type}(conn.Do("GET", o.${cache_name}Key()))
// 	if e !=nil {
// 		if e == redis.ErrNil {
//             if e:=source(&rs); e!=nil {
// 				return rs, errorx.Wrap(e)
// 			}
// 			if _, e= conn.Do("SETEX",  o.${cache_name}Key(), ${cache_name}Duration(), rs),; e!=nil {
// 				return rs, errorx.Wrap(e)
// 			}
// 			return rs,nil
// 		}
// 		return rs, errorx.Wrap(e)
// 	}
// 	return rs,nil

// }
// flexible-cache Tail

// no-decode Header
//
// MustGetNoDecode do most similar work as MustGet do, but it will not unmarshal data from redis into 'o', in the meanwhile, will return its raw json stream as return.
// This function aims to save cost of decoding in the only case that you want to return 'o' itself and has nothing changed to inner values.
// 'engine' should prepare its condition.
// if record not found,it will return 'var notFound = fmt.Errorf("not found record in db nor redis")'.
// If you want to ignore not found error, do it like:
// if buf, e:= o.MustGetNoDecode(conn, engine.Model(Model{}).Where("condition =?", arg)).Error;e!=nil {
//     if e.Error() == "not found record in db nor redis" || e == redis.ErrNil {
//         log.Println(e)
//         return
//     }
// }
//
func (o *UploadLog) MustGetNoDecode(conn redis.Conn, engine *gorm.DB) (json.RawMessage, error) {
	var shouldSyncToCache bool

	if UploadLogCacheSwitch {
		if e := o.getFromCache(); e == nil {
			return nil, nil
		}
		defer func() {
			if shouldSyncToCache {
				fmt.Println("exec sync to cache")
				o.syncToCache()
			}
		}()
	}

	arrBuf, e := o.GetFromRedisNoDecode(conn)
	// When redis key stores its value 'DISABLE', will returns notFoundError and no need to query from db any more
	if e != nil && e.Error() == "not found record in db nor redis" {
		return nil, e
	}

	if e == nil {
		shouldSyncToCache = true
		return arrBuf, nil
	}
	if e != nil {
		var count int
		if e2 := engine.Count(&count).Error; e2 != nil {
			return nil, errorx.GroupErrors(errorx.Wrap(e), errorx.Wrap(e2))
		}
		if count == 0 {
			var notFound = fmt.Errorf("not found record in db nor redis")
			if o.RedisSecondDuration() == -1 {
				conn.Do("SET", o.RedisKey(), "DISABLE", "NX")
			} else {
				conn.Do("SET", o.RedisKey(), "DISABLE", "EX", o.RedisSecondDuration(), "NX")
			}
			return nil, notFound
		}

		if e3 := engine.First(&o).Error; e3 != nil {
			return nil, errorx.GroupErrors(errorx.Wrap(e), errorx.Wrap(e3))
		}
		shouldSyncToCache = true

		if e == redis.ErrNil {
			o.SyncToRedis(conn)
			return nil, nil
		}
		return nil, errorx.Wrap(e)
	}
	return nil, nil
}

// GetFromRedisNoDecode will return its json raw stream and will not decode into 'o'.
// It aims to save cost of decoding if json stream is decoded slowly.
func (o *UploadLog) GetFromRedisNoDecode(conn redis.Conn) (json.RawMessage, error) {
	if o.RedisKey() == "" {
		return nil, errorx.NewFromString("object UploadLog has not set redis key yet")
	}
	buf, e := redis.Bytes(conn.Do("GET", o.RedisKey()))

	if e == nil && string(buf) == "DISABLE" {
		return nil, fmt.Errorf("not found record in db nor redis")
	}

	if e == redis.ErrNil {
		return nil, e
	}

	if e != nil && e != redis.ErrNil {
		return nil, errorx.Wrap(e)
	}

	return buf, nil
}

// ArrayMustGetNoDecode will not unmarshal json stream to 'arr' and return json.Rawmessage as return value instead if it's found in redis,
// otherwise will return arr from cache or db.
//
// This function aims to save cost of decoding in the read-only case of 'o'. It means you should do nothing changed to its json value.
/*
	arr, arrBuf, e:= o.ArrayMustGetNoDecode(conn, engine)
	if e!=nil {
	// handle error
	}

	if len(arrBuf) >0 {
	c.JSON(200, gin.H{"message":"success", "data": arrBuf})
	} else {
		c.JSON(200, gin.H{"message":"success", "data": arr})
	}
*/
func (o *UploadLog) ArrayMustGetNoDecode(conn redis.Conn, engine *gorm.DB) ([]UploadLog, json.RawMessage, error) {
	var shouldSyncToCache bool
	var arr []UploadLog

	if ArrayUploadLogCacheSwitch {
		if arr, e := o.ArrayGetFromCache(); e == nil {
			return arr, nil, nil
		}
		defer func() {
			if shouldSyncToCache {
				fmt.Println("exec sync to cache")
				o.ArraySyncToCache(arr)
			}
		}()
	}

	arrBuf, e := o.ArrayGetFromRedisNoDecode(conn)
	// When redis key stores its value 'DISABLE', will returns notFoundError and no need to query from db any more
	// When call ArrayDeleteFromRedis(), will activate its redis and db query
	if e != nil && e.Error() == "not found record in db nor redis" {
		return nil, nil, e
	}
	// get from redis success.
	if e == nil {
		// shouldSyncToCache = true
		// arr = list
		return nil, arrBuf, nil
	}
	// get from redis fail, try db
	if e != nil {
		var list = make([]UploadLog, 0, 100)
		var count int
		if e2 := engine.Count(&count).Error; e2 != nil {
			return nil, nil, errorx.GroupErrors(errorx.Wrap(e), errorx.Wrap(e2))
		}
		if count == 0 {
			var notFound = fmt.Errorf("not found record in db nor redis")
			if o.RedisSecondDuration() == -1 {
				conn.Do("SET", o.ArrayRedisKey(), "DISABLE", "NX")
			} else {
				conn.Do("SET", o.ArrayRedisKey(), "DISABLE", "EX", o.RedisSecondDuration(), "NX")
			}
			return nil, nil, notFound
		}

		if e3 := engine.Find(&list).Error; e3 != nil {
			return nil, nil, errorx.GroupErrors(errorx.Wrap(e), errorx.Wrap(e3))
		}

		shouldSyncToCache = true
		arr = list
		// try sync to redis
		if e == redis.ErrNil {
			o.ArraySyncToRedis(conn, list)
			return list, nil, nil
		}
		return nil, nil, errorx.Wrap(e)
	}
	return nil, nil, nil
}

func (o *UploadLog) ArrayGetFromRedisNoDecode(conn redis.Conn) (json.RawMessage, error) {
	if o.ArrayRedisKey() == "" {
		return nil, errorx.NewFromString("object UploadLog has not set redis key yet")
	}

	buf, e := redis.Bytes(conn.Do("GET", o.ArrayRedisKey()))

	// avoid passing through and hit database
	// When o.ArrayMustGet() not found both in redis and db, will set its key DISABLE
	// and return 'fmt.Errorf("not found record in db nor redis")'
	if e == nil && string(buf) == "DISABLE" {
		return nil, fmt.Errorf("not found record in db nor redis")
	}

	// Not found in redis
	if e == redis.ErrNil {
		return nil, e
	}

	// Server error, should be logged by caller
	if e != nil && e != redis.ErrNil {
		return nil, errorx.Wrap(e)
	}

	return buf, nil
}

// no-decode Tail
// Auto-Generate Tail
